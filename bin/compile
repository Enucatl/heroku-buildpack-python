#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

# Fail fast and fail hard.
set -eo pipefail
set -x

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Setup bpwatch
export PATH=$PATH:$ROOT_DIR/vendor/bpwatch
LOGPLEX_KEY="t.b396af7f-ad75-4643-8b9e-ebb288acc624"
export BPWATCH_STORE_PATH=$CACHE_DIR/bpwatch.json
BUILDPACK_VERSION=v28

# Support Anvil Build_IDs
[ ! "$REQUEST_ID" ] && REQUEST_ID=$SLUG_ID

bpwatch init $LOGPLEX_KEY
bpwatch build python $BUILDPACK_VERSION $REQUEST_ID

bpwatch start compile

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Directory Hacks for path consistiency.
APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Copy Anvil app dir to temporary storage...
bpwatch start anvil_appdir_stage
if [ "$SLUG_ID" ]; then
    mkdir -p $TMP_APP_DIR
    deep-mv $APP_DIR $TMP_APP_DIR
else
    deep-rm $APP_DIR
fi
bpwatch stop anvil_appdir_stage

# Copy Application code in.
bpwatch start appdir_stage
    deep-mv $BUILD_DIR $APP_DIR
bpwatch stop appdir_stage

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Switch to the repo's context.
cd $BUILD_DIR

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
    puts-step "No requirements.txt provided; assuming dist package."
    echo "-e ." > requirements.txt
fi

PYTHON_VERSION=$(cat .python-version)

bpwatch start install_python

    puts-step "Preparing Python runtime ($PYTHON_VERSION)"
    curl http://immense-river-6847.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
    if [[ $? != 0 ]] ; then
        puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
        puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
        exit 1
    fi

    # copy the profile.d init files
    mkdir -p .profile.d
    cp -n $ROOT_DIR/.profile .profile
    cp -n $ROOT_DIR/.profile.d/* .profile.d
    source .profile.d/*.sh
    source .profile

bpwatch stop install_python

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
bpwatch start pylibmc_install
    source $BIN_DIR/steps/pylibmc
bpwatch stop pylibmc_install

# Install dependencies with Pip.
puts-step "Installing dependencies using Pip ($PIP_VERSION)"

pip install -e git+https://bitbucket.org/Enucatl/get_git_version.git#egg=get_git_version
pip install -r requirements.txt --exists-action=w --allow-all-external  | cleanup | indent

# ### Fin.
bpwatch start appdir_commit
    deep-mv $BUILD_DIR $ORIG_BUILD_DIR
bpwatch stop appdir_commit

bpwatch start anvil_appdir_commit
    if [ "$SLUG_ID" ]; then
        deep-mv $TMP_APP_DIR $APP_DIR
    fi
bpwatch stop anvil_appdir_commit
